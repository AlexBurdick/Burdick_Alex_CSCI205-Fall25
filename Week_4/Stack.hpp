/*********************************************************************
 * @file  Stack.hpp
 * 
 * @brief Implementation of the class Stack.
 *********************************************************************/

#ifndef STACK_H
#define STACK_H

template <typename T>
class Stack{
    
    private:
        Deque<T> d;

    public:
        // CONSTRUCTORS
        /**
		 * @brief Default constructor, acts like Stack(){}; but is more explicit. 
		 * 
\		 */
        Stack() = default; // Generated by Copilot 09/18/2025

        /**
		 * @brief Construct a new Stack object with a given capacity
		 * 
		 * @param cap The capacity of the stack
		 */
        Stack(size_t cap) : d(cap) {} // Generated by Copilot 09/18/2025

        // MEMBER FUNCTIONS
        void push(const T& item){
            d.push_front(item);
        }

        T pop(){
            return d.pop_front();
        }

        T peak(){
            return d.front();
        }

        bool full(){
            return d.full();
        }

        bool empty(){
            return d.empty();
        }

        size_t size(){
            return d.size();
        }

        void print(){
            d.print();
        }
};

#endif // STACK_H